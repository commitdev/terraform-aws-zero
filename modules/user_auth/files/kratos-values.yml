image:
  repository:  oryd/kratos
  tag: v0.5.4-alpha.1-sqlite
  pullPolicy: IfNotPresent

# To set up OIDC you can uncomment this and create a secret which contains the
# OIDC provider configuration in JSON format in an env var called SELFSERVICE_METHODS_OIDC
# See README.md for more info
# deployment:
  # environmentSecretsName: secretName

kratos:
  development: false
  autoMigrate: true

#  You can add multiple identity schemas here
  identitySchemas:
    "identity.default.schema.json": |
      {
        "$id": "default",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Person",
        "type": "object",
        "properties": {
          "traits": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "ory.sh/kratos": {
                  "credentials": {
                    "password": {
                      "identifier": true
                    }
                  },
                  "recovery": {
                    "via": "email"
                  }
                }
              }
            }
          }
        }
      }

  config:
    secrets:
      default: ["test-insecure-session-id-here"]
    courier:
      smtp:
        connection_uri: "http://mail-server" # TODO: Mail support


    hashers:
      argon2:
        parallelism: 1
        memory: 131072
        iterations: 2
        salt_length: 16
        key_length: 16

    identity:
      # This is populated by kratos.identitySchemas above
      default_schema_url: file:///etc/config/identity.default.schema.json

    selfservice:
      # To set up OIDC (Github, Google login, etc.) the 'oidc' method section can be provided via env var, see the deployment section above
      methods:
        # TODO: Look in to error when this is enabled
        # link:
          # enabled: true
        password:
          enabled: true

      default_browser_return_url: / # Overridden by user_auth.tf
      whitelisted_return_urls:
        - / # Overridden by user_auth.tf

      flows:
        settings:
          ui_url: /auth/settings # Overridden by user_auth.tf
          lifespan: 1m
          privileged_session_max_age: 5m

          after:
            default_browser_return_url: /dashboard # Overridden by user_auth.tf

        verification:
          enabled: true
          ui_url: /auth/verify # Overridden by user_auth.tf
          lifespan: 5m
          after:
            default_browser_return_url: /dashboard # Overridden by user_auth.tf

        recovery:
          enabled: true
          ui_url: /auth/recovery # Overridden by user_auth.tf
          lifespan: 1h

        logout:
          after:
            default_browser_return_url: / # Overridden by user_auth.tf

        login:
          ui_url: /auth/login # Overridden by user_auth.tf
          lifespan: 1h

          after:
            default_browser_return_url: /dashboard # Overridden by user_auth.tf

        registration:
          ui_url: /auth/registration
          lifespan: 5m

          after:
            default_browser_return_url: /dashboard # Overridden by user_auth.tf

            password:
              default_browser_return_url: /dashboard # Overridden by user_auth.tf

              hooks:
                - hook: session

            oidc:
              default_browser_return_url: /dashboard # Overridden by user_auth.tf

              hooks:
                - hook: session

        error:
          ui_url: /auth/errors # Overridden by user_auth.tf

